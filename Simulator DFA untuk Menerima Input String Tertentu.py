# -*- coding: utf-8 -*-
"""Simulator DFA untuk Menerima Input String Tertentu

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fG5-zZAa6XrVEzpcIjoGt8oxh82glBdV
"""

#Restian DF

def dfa_simulator(input_string, state_sekarang, transisi, final_states):
    for symbol in input_string:
        if symbol not in transisi[state_sekarang]:
            return False
        state_sekarang = transisi[state_sekarang][symbol]

    if state_sekarang in final_states:
        return True, state_sekarang
    else:
        return False, state_sekarang


transisi = {
    'q0': {'0': 'q1', '2': 'q1', '4': 'q1', '6': 'q1', '8': 'q1', 'a': 'q', 'b': 'q', 'c': 'q', 'd': 'q'},
    'q1': {'0': 'q1', '2': 'q1', '4': 'q1', '6': 'q1', '8': 'q1', 'a': 'q', 'b': 'q', 'c': 'q', 'd': 'q'}
}

while True:
    print("")
    start_state = input("Masukkan state (q0 atau q1), atau x untuk keluar: ")
    if start_state == 'x':
        break
    if start_state not in transisi:
        print(f"State {start_state} tidak ada dalam daftar state DFA.")
        continue

    input_string = input("Masukkan input string: ")
    if not all(x.isdigit() and int(x) % 2 == 0 or x in {'a', 'b', 'c', 'd'} for x in input_string):
        print("Input string tidak valid.")
        continue

    final_states = {'q1'}
    result, state_sekarang = dfa_simulator(input_string, start_state, transisi, final_states)

    if result:
        print(f'Input string: {input_string}, hasil: DITERIMA di state {state_sekarang}')
    else:
        print(f'Input string: {input_string}, hasil: DITERMA di state {state_sekarang}')